{"version":3,"file":"component---src-templates-post-details-js-235ca76b2e4564442f58.js","mappings":"uNA8BA,MAvBmB,IAAqB,IAApB,WAAEA,GAAY,EAE/B,OACK,uBAAKC,UCTW,wCDUX,qBAAGC,MAAM,cACR,yBAAG,eAEJ,sBAAIA,MAAM,0BACTF,aAAU,EAAVA,EAAYG,KAAIC,GACT,0BACG,gBAAC,EAAAC,KAAI,CAACC,GAAE,eAAiBC,IAAUH,GAAS,KACtCA,OAQhB,C,sKEhBd,MA0EaI,EAAO,IAAyC,IAAtCC,MAAQC,eAAgBC,IAAQ,EACrD,OACE,gBAAC,IAAG,CACFC,MAAOD,EAAKE,YAAYD,MACxBE,YAAaH,EAAKE,YAAYC,aAAeH,EAAKI,SAClD,EAIN,MAnFyB,IAIlB,IAAD,MAHJN,MAAM,SAAEO,EAAQ,KAAEC,EAAI,KAAEC,EAAMR,eAAgBC,EAAI,SAAEQ,EAAW,KAGhE,EAEC,MAAMC,GAA6B,QAAjB,EAAAF,EAAKG,oBAAY,aAAjB,EAAmBT,QAAK,QAEnCU,EAAQX,EAAKE,YAAYS,KAKhC,OAJAC,QAAQC,IAAIF,GAKV,gBAAC,IAAM,CAACH,SAAUA,EAAUP,MAAOQ,GAIjC,2BACInB,UCvBQ,mCDwBRwB,WAAS,EACTC,SAAS,6BAET,0BAAQzB,UC7BE,sCD8BR,uBAAKA,UC3BE,qCD4BL,yBAAIU,EAAKE,YAAYD,QAEvB,uBAAKX,UCnCC,oCDoCJ,yBAAIU,EAAKE,YAAYc,OAGvB,gBAAC,UAAI,CAACL,KAASA,KAIjB,uBAAKrB,UC5CM,sCD6CT2B,wBAAyB,CAAEC,OAAQlB,EAAKmB,MACxCC,SAAS,gBAGX,0BAAQ9B,UC/CE,sCDgDR,gBAAC,IAAG,QAGV,uBAAKA,UCjDM,mCDkDT,sBACE+B,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGrB,GACC,gBAAC,EAAAX,KAAI,CAACC,GAAIU,EAASsB,OAAOC,KAAMC,IAAI,QAAO,KACtCxB,EAASH,YAAYD,QAI9B,0BACGK,GACC,gBAAC,EAAAZ,KAAI,CAACC,GAAIW,EAAKqB,OAAOC,KAAMC,IAAI,QAC7BvB,EAAKJ,YAAYD,MAAM,SAMzB,C","sources":["webpack://gatsby-starter-blog/./src/pages/categories.js","webpack://gatsby-starter-blog/./src/pages/categories.module.css","webpack://gatsby-starter-blog/./src/templates/post-details.js","webpack://gatsby-starter-blog/./src/templates/post-details.module.css"],"sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\"\nimport kebabCase from \"lodash/kebabCase\"\nimport 'bulma/css/bulma.min.css';\nimport * as Classes from './categories.module.css';\n\n\nconst Categories = ({ categories }) => {\n\n   return (\n        <div className={Classes.categories}>\n             <p class=\"menu-label\">\n              <b>categories</b>  \n            </p>\n             <ul class=\"menu-list is-one-third\">\n             {categories?.map(category => (\n                     <li>\n                        <Link to={`/categories/${kebabCase(category)}/`}>\n                            { category }\n                        </Link>\n                    </li>\n                )\n             )\n             }\n              {/* <a class=\"is-active\">Manage Your Team</a> */}\n            </ul>\n        </div>\n    )\n}\n\nexport default Categories\n\nexport const pageQuery = graphql`\n  query Category($category: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: {slug: DESC}}\n      filter: { frontmatter: { category: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","// extracted by mini-css-extract-plugin\nexport var categories = \"categories-module--categories--bd5c1\";","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout/layout\"\nimport Seo from \"../components/seo\"\nimport Tags from \"../pages/tags\" \nimport Categoris from \"../pages/categories\"\nimport * as Classes from './post-details.module.css';\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post, location = \"\",  \n  },\n\n}) => {\n\n  const siteTitle = site.siteMetadata?.title || `Title`\n  // const categories = data.allMarkdownRemark.categoryList\n  const  tags  = post.frontmatter.tags;\n  console.log(tags);\n\n  // const { tag } = pageContext \n\n  return (\n    <Layout location={location} title={siteTitle}>\n        {/* <Layout location={`/blog/`} title={siteTitle}></Layout> */}\n        {/* <Categoris categories ={ categories }/> */}\n  \n      <article\n          className={Classes.post}\n          itemScope\n          itemType=\"http://schema.org/Article\"\n        >\n          <header className={Classes.header}>\n            <div className={Classes.title}>\n              <p>{post.frontmatter.title}</p>\n            </div>\n            <div className={Classes.date}>\n              <p>{post.frontmatter.date}</p>\n            </div>\n\n            <Tags tags = { tags } />\n            \n          </header>\n\n          <div className={Classes.content}\n            dangerouslySetInnerHTML={{ __html: post.html }}\n            itemProp=\"articleBody\"\n          /> \n\n          <footer className={Classes.footer}>\n            <Bio />\n          </footer>\n      </article>\n      <nav className={Classes.nav}>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n      </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n","// extracted by mini-css-extract-plugin\nexport var content = \"post-details-module--content--881fb\";\nexport var date = \"post-details-module--date--ae447\";\nexport var footer = \"post-details-module--footer--0623e\";\nexport var header = \"post-details-module--header--1edd2\";\nexport var nav = \"post-details-module--nav--50f2c\";\nexport var post = \"post-details-module--post--7e1de\";\nexport var title = \"post-details-module--title--5d01a\";"],"names":["categories","className","class","map","category","Link","to","kebabCase","Head","data","markdownRemark","post","title","frontmatter","description","excerpt","previous","next","site","location","siteTitle","siteMetadata","tags","console","log","itemScope","itemType","date","dangerouslySetInnerHTML","__html","html","itemProp","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}